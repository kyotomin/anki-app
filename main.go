package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"io/fs"
	"math/rand"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type Card struct {
	Word        string `json:"Word"`
	Translation string `json: "Translation"`
}

type StudyCard struct {
	Question string
	Answer   string
	Original Card
}

type Deck struct {
	Name  string
	Cards []Card
}

func NewDeck(name string, jsonFilePath string) (*Deck, error) {
	data, err := os.ReadFile(jsonFilePath)
	if err != nil {
		return nil, err
	}

	var cards []Card
	err = json.Unmarshal(data, &cards)
	if err != nil {
		return nil, err
	}

	deck := &Deck{
		Name:  name,
		Cards: cards,
	}

	return deck, nil
}

func (d *Deck) createStudyCards(mode string) []StudyCard {
	var studyCards []StudyCard

	for _, card := range d.Cards {
		switch mode {
		case "en-ru":
			studyCards = append(studyCards, StudyCard{
				Question: card.Word,
				Answer:   card.Translation,
				Original: card,
			})
		case "ru-en":
			studyCards = append(studyCards, StudyCard{
				Question: card.Translation,
				Answer:   card.Word,
				Original: card,
			})
		case "both":
			studyCards = append(studyCards, StudyCard{
				Question: card.Word,
				Answer:   card.Translation,
				Original: card,
			})
			studyCards = append(studyCards, StudyCard{
				Question: card.Translation,
				Answer:   card.Word,
				Original: card,
			})
		}
	}

	return studyCards
}

func (d *Deck) selectMode() (mode string) {
	scanner := bufio.NewScanner(os.Stdin)

	fmt.Println("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è:")
	fmt.Println("1. –ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π (en-ru)")
	fmt.Println("2. –†—É—Å—Å–∫–∏–π ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (ru-en)")
	fmt.Println("3. –û–±–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (both)")
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ")

	scanner.Scan()
	choice := strings.TrimSpace(scanner.Text())

	switch choice {
	case "1":
		return "en-ru"
	case "2":
		return "ru-en"
	case "3":
		return "both"
	default:
		fmt.Println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí –†—É—Å—Å–∫–∏–π'")
		return "en-ru"
	}
}

func (d *Deck) learnDeck() {
	rand.Seed(time.Now().UnixNano())
	scanner := bufio.NewScanner(os.Stdin)

	mode := d.selectMode()

	studyCards := d.createStudyCards(mode)

	total := len(studyCards)
	correct := 0
	incorrect := []StudyCard{}
	startTime := time.Now()

	rand.Shuffle(len(studyCards), func(i, j int) {
		studyCards[i], studyCards[j] = studyCards[j], studyCards[i]
	})

	modeNames := map[string]string{
		"en-ru": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π - –†—É—Å—Å–∫–∏–π",
		"ru-en": "–†—É—Å—Å–∫–∏–π - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
		"both":  "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π + –†—É—Å—Å–∫–∏–π",
	}

	fmt.Printf("–£—á–∏–º –∫–æ–ª–æ–¥—É %s –≤ —Ä–µ–∂–∏–º–µ %s (%d –∫–∞—Ä—Ç–æ—á–µ–∫)\n", d.Name, modeNames[mode], total)
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ enter –¥–ª—è –Ω–∞—á–∞–ª–∞, q –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
	fmt.Scan()

	for i, card := range studyCards {
		fmt.Printf("–ö–∞—Ä—Ç–æ—á–∫–∞ %d/%d\n", i+1, total)
		fmt.Printf("–°–ª–æ–≤–æ: %s, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n", card.Question)

		scanner.Scan()
		answer := scanner.Text()

		if strings.ToLower(answer) == card.Answer {
			correct++
			fmt.Printf("–í–µ—Ä–Ω–æ! %s = %s\n", card.Question, card.Answer)
		} else if strings.ToLower(answer) == "q" {
			break
		} else {
			fmt.Printf("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: %s. –í–∞—à –û—Ç–≤–µ—Ç: %s", card.Answer, answer)
			incorrect = append(incorrect, card)
		}

		if len(incorrect) > 0 {
			fmt.Println("--- –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—à–∏–±–∫–∏ ---")
			for _, card := range incorrect {
				fmt.Printf("–°–ª–æ–≤–æ: %s, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:", card.Question)
				scanner.Scan()
				if strings.ToLower(scanner.Text()) == card.Answer {
					fmt.Printf("–í–µ—Ä–Ω–æ! %s = %s", card.Question, card.Answer)
				}
			}
		}

	}

	duration := time.Since(startTime).Round(time.Second)
	accuracy := float64(correct) / float64(total) * 100
	fmt.Printf("\nüèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: %d/%d (%.0f%%) –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v\n, ", correct, total, accuracy, duration)
}

func showUserProfile() {
	fmt.Print("In progress")
}

func addDeck() {
	scanner := bufio.NewScanner(os.Stdin)

	fmt.Println("\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–¥—ã")
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–ª–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (q –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
	scanner.Scan()
	if strings.ToLower(strings.TrimSpace(scanner.Text())) == "q" {
		return
	}
	name := strings.TrimSpace(scanner.Text())

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: decks/words.json): ")
	scanner.Scan()
	if strings.ToLower(strings.TrimSpace(scanner.Text())) == "q" {
		return
	}
	filePath := strings.TrimSpace(scanner.Text())

	deck, err := NewDeck(name, filePath)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–æ–¥—ã: %v\n", err)
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: ")
		fmt.Scanln()
		showMainMenu()
	}

	fmt.Printf("‚úÖ –ö–æ–ª–æ–¥–∞ '%s' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! (%d –∫–∞—Ä—Ç–æ—á–µ–∫)\n", deck.Name, len(deck.Cards))
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: ")
	fmt.Scanln()
}

func processLearnDeck() {
	fmt.Println("\nüìö –í—ã–±–æ—Ä –∫–æ–ª–æ–¥—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")

	decksDir := "decks"
	if _, err := os.Stat(decksDir); os.IsNotExist(err) {
		fmt.Printf("‚ùå –ü–∞–ø–∫–∞ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É –∏ –¥–æ–±–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª—ã —Å –∫–æ–ª–æ–¥–∞–º–∏.\n", decksDir)
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: ")
		fmt.Scanln()
		return
	}

	var jsonFiles []string
	err := filepath.WalkDir(decksDir, func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}
		if !d.IsDir() && strings.HasSuffix(strings.ToLower(d.Name()), ".json") {
			jsonFiles = append(jsonFiles, path)
		}
		return nil
	})

	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ decks: %v\n", err)
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: ")
		fmt.Scanln()
		return
	}

	if len(jsonFiles) == 0 {
		fmt.Printf("‚ùå JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ '%s'\n", decksDir)
		fmt.Println("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª—ã —Å –∫–æ–ª–æ–¥–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: ")
		fmt.Scanln()
		return
	}

	fmt.Println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–¥—ã:")
	for i, file := range jsonFiles {
		fmt.Printf("%d. %s\n", i+1, file)
	}
	fmt.Printf("%d. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n", len(jsonFiles)+1)

	scanner := bufio.NewScanner(os.Stdin)
	fmt.Print("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–ª–æ–¥—ã: ")
	scanner.Scan()
	choice := strings.TrimSpace(scanner.Text())

	var selectedIndex int
	_, err = fmt.Sscanf(choice, "%d", &selectedIndex)
	if err != nil || selectedIndex < 1 || selectedIndex > len(jsonFiles)+1 {
		fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: ")
		fmt.Scanln()
		return
	}

	if selectedIndex == len(jsonFiles)+1 {
		return
	}

	selectedFile := jsonFiles[selectedIndex-1]
	deckName := strings.TrimSuffix(filepath.Base(selectedFile), ".json")

	deck, err := NewDeck(deckName, selectedFile)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–æ–¥—ã: %v\n", err)
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: ")
		fmt.Scanln()
		return
	}

	if len(deck.Cards) == 0 {
		fmt.Println("‚ùå –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞")
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: ")
		fmt.Scanln()
		return
	}

	deck.learnDeck()
}

func showMainMenu() {
	scanner := bufio.NewScanner(os.Stdin)

	for {
		fmt.Println("\n" + strings.Repeat("=", 40))
		fmt.Println("üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Anki-Like-App!")
		fmt.Println(strings.Repeat("=", 40))
		fmt.Println("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:")
		fmt.Println("1. üìä –ü—Ä–æ—Ñ–∏–ª—å (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
		fmt.Println("2. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–¥—É")
		fmt.Println("3. üìö –£—á–∏—Ç—å –∫–æ–ª–æ–¥—ã")
		fmt.Println("4. üö™ –í—ã—Ö–æ–¥")
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ")

		scanner.Scan()
		choice := strings.TrimSpace(scanner.Text())

		switch choice {
		case "1":
			showUserProfile()
		case "2":
			addDeck()
		case "3":
			processLearnDeck()
		case "4":
			fmt.Println("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
			return
		default:
			fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è: ")
			fmt.Scanln()
		}
	}
}

func main() {
	showMainMenu()
}
